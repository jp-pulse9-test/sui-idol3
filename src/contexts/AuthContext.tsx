import React, { createContext, useContext, useEffect, useState } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { secureStorage } from '@/utils/secureStorage';
import { useWallet } from '@/hooks/useWallet';

interface AuthContextType {
  user: { id: string; wallet_address: string } | null;
  loading: boolean;
  connectWallet: () => Promise<{ error: any }>;
  disconnectWallet: () => Promise<void>;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [user, setUser] = useState<{ id: string; wallet_address: string } | null>(null);
  const [loading, setLoading] = useState(true);
  const { isConnected, walletAddress, connectWallet: dappKitConnect, disconnectWallet: dappKitDisconnect } = useWallet();

  useEffect(() => {
    const checkWalletConnection = async () => {
      const savedWallet = secureStorage.getWalletAddress();
      if (savedWallet) {
        // Î≥¥ÏïàÏùÑ ÏúÑÌï¥ DB Ï°∞Ìöå ÏóÜÏù¥ Î°úÏª¨ ÏÉÅÌÉú Î≥µÏõê
        const userId = 'user_' + savedWallet.slice(-12);
        setUser({ id: userId, wallet_address: savedWallet });
        console.log('Ï†ÄÏû•Îêú ÏßÄÍ∞ë Ïó∞Í≤∞ Î≥µÏõê:', savedWallet);
      }
      setLoading(false);
    };

    checkWalletConnection();
  }, []);

  // dapp-kit ÏßÄÍ∞ë Ïó∞Í≤∞ ÏÉÅÌÉú ÎèôÍ∏∞Ìôî
  useEffect(() => {
    if (isConnected && walletAddress) {
      const userId = 'user_' + walletAddress.slice(-12);
      setUser({ id: userId, wallet_address: walletAddress });
      secureStorage.setWalletAddress(walletAddress);
      console.log('dapp-kit ÏßÄÍ∞ë Ïó∞Í≤∞Îê®:', walletAddress);
    } else if (!isConnected) {
      setUser(null);
      secureStorage.removeWalletAddress();
      console.log('dapp-kit ÏßÄÍ∞ë Ïó∞Í≤∞ Ìï¥Ï†úÎê®');
    }
  }, [isConnected, walletAddress]);

  const connectWallet = async () => {
    try {
      console.log('üî• dapp-kit ÏßÄÍ∞ë Ïó∞Í≤∞ ÏãúÎèÑ...');
      
      const result = await dappKitConnect();
      
      if (result.success && walletAddress) {
        console.log('‚úÖ dapp-kit ÏßÄÍ∞ë Ïó∞Í≤∞ ÏÑ±Í≥µ:', walletAddress);
        
        // SupabaseÏóê ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Ï†ÄÏû• ÏãúÎèÑ
        try {
          const { data: newUser, error: insertError } = await supabase
            .from('users')
            .insert([{ wallet_address: walletAddress }])
            .select()
            .single();

          if (insertError) {
            console.log('Insert error details:', insertError);
            
            // Ï§ëÎ≥µ ÏßÄÍ∞ë Ï£ºÏÜå ÎòêÎäî RLS Ï†ïÏ±Ö ÏúÑÎ∞ò - Ïù¥ÎØ∏ Ï°¥Ïû¨ÌïòÎäî ÏÇ¨Ïö©ÏûêÎ°ú Ï≤òÎ¶¨
            if (insertError.code === '23505' || insertError.code === '42501') {
              console.log('‚úÖ Í∏∞Ï°¥ ÏÇ¨Ïö©Ïûê ÏßÄÍ∞ë Ïó∞Í≤∞');
            } else {
              console.error('‚ùå ÏÇ¨Ïö©Ïûê ÏÉùÏÑ± Ïò§Î•ò:', insertError);
            }
          } else {
            console.log('‚úÖ ÏÉà ÏÇ¨Ïö©Ïûê ÏÉùÏÑ±:', newUser.id);
          }
        } catch (dbError) {
          console.error('‚ùå DB Ï†ÄÏû• Ïò§Î•ò:', dbError);
          // DB Ïò§Î•òÎäî Î¨¥ÏãúÌïòÍ≥† ÏßÄÍ∞ë Ïó∞Í≤∞ÏùÄ Ïú†ÏßÄ
        }
        
        return { error: null };
      } else {
        console.warn('‚ö†Ô∏è Ïã§Ï†ú ÏßÄÍ∞ë Ïó∞Í≤∞ Ïã§Ìå®, Î™®Ïùò ÏßÄÍ∞ëÏúºÎ°ú ÎåÄÏ≤¥');
        
        // Ïã§Ï†ú ÏßÄÍ∞ë Ïó∞Í≤∞ Ïã§Ìå® Ïãú Î™®Ïùò ÏßÄÍ∞ë ÏÉùÏÑ±
        const mockAddress = `0x${Math.random().toString(16).substring(2, 42).padStart(40, '0')}`;
        const mockUser = { id: 'mock_' + Date.now(), wallet_address: mockAddress };
        
        setUser(mockUser);
        secureStorage.setWalletAddress(mockAddress);
        localStorage.setItem('walletAddress', mockAddress);
        localStorage.setItem('suiCoins', '100.0');
        localStorage.setItem('isMockWallet', 'true');
        
        console.log('‚úÖ Î™®Ïùò ÏßÄÍ∞ë ÏÉùÏÑ± ÏôÑÎ£å:', mockAddress);
        return { error: null };
      }
    } catch (error) {
      console.error('‚ùå ÏßÄÍ∞ë Ïó∞Í≤∞ Ïò§Î•ò:', error);
      return { error };
    }
  };

  const disconnectWallet = async () => {
    try {
      await dappKitDisconnect();
      secureStorage.removeWalletAddress();
      localStorage.removeItem('walletAddress');
      localStorage.removeItem('suiCoins');
      localStorage.removeItem('isMockWallet');
      setUser(null);
      console.log('‚úÖ ÏßÄÍ∞ë Ïó∞Í≤∞ Ìï¥Ï†ú ÏôÑÎ£å');
    } catch (error) {
      console.error('‚ùå ÏßÄÍ∞ë Ïó∞Í≤∞ Ìï¥Ï†ú Ïò§Î•ò:', error);
    }
  };

  const value = {
    user,
    loading,
    connectWallet,
    disconnectWallet,
  };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
};